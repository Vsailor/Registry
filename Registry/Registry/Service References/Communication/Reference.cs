//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Registry.Communication {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetAllCategoriesResult", Namespace="http://schemas.datacontract.org/2004/07/Registry.Data.Models")]
    [System.SerializableAttribute()]
    public partial class GetAllCategoriesResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> ParentIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> ParentId {
            get {
                return this.ParentIdField;
            }
            set {
                if ((this.ParentIdField.Equals(value) != true)) {
                    this.ParentIdField = value;
                    this.RaisePropertyChanged("ParentId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetAllGroupsResult", Namespace="http://schemas.datacontract.org/2004/07/Registry.Data.Models")]
    [System.SerializableAttribute()]
    public partial class GetAllGroupsResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CreateUserRequest", Namespace="http://schemas.datacontract.org/2004/07/Registry.Data.Models")]
    [System.SerializableAttribute()]
    public partial class CreateUserRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((this.GroupIdField.Equals(value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateUserRequest", Namespace="http://schemas.datacontract.org/2004/07/Registry.Data.Models")]
    [System.SerializableAttribute()]
    public partial class UpdateUserRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((this.GroupIdField.Equals(value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetAllUsersResult", Namespace="http://schemas.datacontract.org/2004/07/Registry.Data.Models")]
    [System.SerializableAttribute()]
    public partial class GetAllUsersResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetUserByLoginResult", Namespace="http://schemas.datacontract.org/2004/07/Registry.Data.Models")]
    [System.SerializableAttribute()]
    public partial class GetUserByLoginResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupId {
            get {
                return this.GroupIdField;
            }
            set {
                if ((this.GroupIdField.Equals(value) != true)) {
                    this.GroupIdField = value;
                    this.RaisePropertyChanged("GroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateUserGroupRequest", Namespace="http://schemas.datacontract.org/2004/07/Registry.Data.Models")]
    [System.SerializableAttribute()]
    public partial class UpdateUserGroupRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetAllUserGroupsResult", Namespace="http://schemas.datacontract.org/2004/07/Registry.Data.Models")]
    [System.SerializableAttribute()]
    public partial class GetAllUserGroupsResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CreateResourceRequest", Namespace="http://schemas.datacontract.org/2004/07/Registry.Data.Models")]
    [System.SerializableAttribute()]
    public partial class CreateResourceRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerLoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ResourceGroupsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SaveDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] TagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerLogin {
            get {
                return this.OwnerLoginField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerLoginField, value) != true)) {
                    this.OwnerLoginField = value;
                    this.RaisePropertyChanged("OwnerLogin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ResourceGroups {
            get {
                return this.ResourceGroupsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResourceGroupsField, value) != true)) {
                    this.ResourceGroupsField = value;
                    this.RaisePropertyChanged("ResourceGroups");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SaveDate {
            get {
                return this.SaveDateField;
            }
            set {
                if ((object.ReferenceEquals(this.SaveDateField, value) != true)) {
                    this.SaveDateField = value;
                    this.RaisePropertyChanged("SaveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetAllResourcesResult", Namespace="http://schemas.datacontract.org/2004/07/Registry.Data.Models")]
    [System.SerializableAttribute()]
    public partial class GetAllResourcesResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SaveDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SaveDate {
            get {
                return this.SaveDateField;
            }
            set {
                if ((object.ReferenceEquals(this.SaveDateField, value) != true)) {
                    this.SaveDateField = value;
                    this.RaisePropertyChanged("SaveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UseFiltersRequest", Namespace="http://schemas.datacontract.org/2004/07/Registry.Data.Models")]
    [System.SerializableAttribute()]
    public partial class UseFiltersRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> ResourceGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] TagsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> ResourceGroupId {
            get {
                return this.ResourceGroupIdField;
            }
            set {
                if ((this.ResourceGroupIdField.Equals(value) != true)) {
                    this.ResourceGroupIdField = value;
                    this.RaisePropertyChanged("ResourceGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Communication.ICategoryRepository")]
    public interface ICategoryRepository {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/GetAllCategories", ReplyAction="http://tempuri.org/ICategoryRepository/GetAllCategoriesResponse")]
        Registry.Communication.GetAllCategoriesResult[] GetAllCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/GetAllCategories", ReplyAction="http://tempuri.org/ICategoryRepository/GetAllCategoriesResponse")]
        System.Threading.Tasks.Task<Registry.Communication.GetAllCategoriesResult[]> GetAllCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/UpdateCategory", ReplyAction="http://tempuri.org/ICategoryRepository/UpdateCategoryResponse")]
        void UpdateCategory(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/UpdateCategory", ReplyAction="http://tempuri.org/ICategoryRepository/UpdateCategoryResponse")]
        System.Threading.Tasks.Task UpdateCategoryAsync(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/CreateCategory", ReplyAction="http://tempuri.org/ICategoryRepository/CreateCategoryResponse")]
        void CreateCategory(System.Guid parentId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/CreateCategory", ReplyAction="http://tempuri.org/ICategoryRepository/CreateCategoryResponse")]
        System.Threading.Tasks.Task CreateCategoryAsync(System.Guid parentId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/DeleteCategory", ReplyAction="http://tempuri.org/ICategoryRepository/DeleteCategoryResponse")]
        void DeleteCategory(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/DeleteCategory", ReplyAction="http://tempuri.org/ICategoryRepository/DeleteCategoryResponse")]
        System.Threading.Tasks.Task DeleteCategoryAsync(System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICategoryRepositoryChannel : Registry.Communication.ICategoryRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CategoryRepositoryClient : System.ServiceModel.ClientBase<Registry.Communication.ICategoryRepository>, Registry.Communication.ICategoryRepository {
        
        public CategoryRepositoryClient() {
        }
        
        public CategoryRepositoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CategoryRepositoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryRepositoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryRepositoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Registry.Communication.GetAllCategoriesResult[] GetAllCategories() {
            return base.Channel.GetAllCategories();
        }
        
        public System.Threading.Tasks.Task<Registry.Communication.GetAllCategoriesResult[]> GetAllCategoriesAsync() {
            return base.Channel.GetAllCategoriesAsync();
        }
        
        public void UpdateCategory(System.Guid id, string name) {
            base.Channel.UpdateCategory(id, name);
        }
        
        public System.Threading.Tasks.Task UpdateCategoryAsync(System.Guid id, string name) {
            return base.Channel.UpdateCategoryAsync(id, name);
        }
        
        public void CreateCategory(System.Guid parentId, string name) {
            base.Channel.CreateCategory(parentId, name);
        }
        
        public System.Threading.Tasks.Task CreateCategoryAsync(System.Guid parentId, string name) {
            return base.Channel.CreateCategoryAsync(parentId, name);
        }
        
        public void DeleteCategory(System.Guid id) {
            base.Channel.DeleteCategory(id);
        }
        
        public System.Threading.Tasks.Task DeleteCategoryAsync(System.Guid id) {
            return base.Channel.DeleteCategoryAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Communication.IResourceGroupRepository")]
    public interface IResourceGroupRepository {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/GetAllResourceGroups", ReplyAction="http://tempuri.org/IResourceGroupRepository/GetAllResourceGroupsResponse")]
        Registry.Communication.GetAllGroupsResult[] GetAllResourceGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/GetAllResourceGroups", ReplyAction="http://tempuri.org/IResourceGroupRepository/GetAllResourceGroupsResponse")]
        System.Threading.Tasks.Task<Registry.Communication.GetAllGroupsResult[]> GetAllResourceGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/UpdateResourceGroup", ReplyAction="http://tempuri.org/IResourceGroupRepository/UpdateResourceGroupResponse")]
        void UpdateResourceGroup(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/UpdateResourceGroup", ReplyAction="http://tempuri.org/IResourceGroupRepository/UpdateResourceGroupResponse")]
        System.Threading.Tasks.Task UpdateResourceGroupAsync(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/DeleteGroup", ReplyAction="http://tempuri.org/IResourceGroupRepository/DeleteGroupResponse")]
        void DeleteGroup(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/DeleteGroup", ReplyAction="http://tempuri.org/IResourceGroupRepository/DeleteGroupResponse")]
        System.Threading.Tasks.Task DeleteGroupAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/CreateGroup", ReplyAction="http://tempuri.org/IResourceGroupRepository/CreateGroupResponse")]
        void CreateGroup(string name, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/CreateGroup", ReplyAction="http://tempuri.org/IResourceGroupRepository/CreateGroupResponse")]
        System.Threading.Tasks.Task CreateGroupAsync(string name, string login);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IResourceGroupRepositoryChannel : Registry.Communication.IResourceGroupRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceGroupRepositoryClient : System.ServiceModel.ClientBase<Registry.Communication.IResourceGroupRepository>, Registry.Communication.IResourceGroupRepository {
        
        public ResourceGroupRepositoryClient() {
        }
        
        public ResourceGroupRepositoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ResourceGroupRepositoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ResourceGroupRepositoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ResourceGroupRepositoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Registry.Communication.GetAllGroupsResult[] GetAllResourceGroups() {
            return base.Channel.GetAllResourceGroups();
        }
        
        public System.Threading.Tasks.Task<Registry.Communication.GetAllGroupsResult[]> GetAllResourceGroupsAsync() {
            return base.Channel.GetAllResourceGroupsAsync();
        }
        
        public void UpdateResourceGroup(System.Guid id, string name) {
            base.Channel.UpdateResourceGroup(id, name);
        }
        
        public System.Threading.Tasks.Task UpdateResourceGroupAsync(System.Guid id, string name) {
            return base.Channel.UpdateResourceGroupAsync(id, name);
        }
        
        public void DeleteGroup(System.Guid id) {
            base.Channel.DeleteGroup(id);
        }
        
        public System.Threading.Tasks.Task DeleteGroupAsync(System.Guid id) {
            return base.Channel.DeleteGroupAsync(id);
        }
        
        public void CreateGroup(string name, string login) {
            base.Channel.CreateGroup(name, login);
        }
        
        public System.Threading.Tasks.Task CreateGroupAsync(string name, string login) {
            return base.Channel.CreateGroupAsync(name, login);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Communication.IUserRepository")]
    public interface IUserRepository {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/CreateUser", ReplyAction="http://tempuri.org/IUserRepository/CreateUserResponse")]
        void CreateUser(Registry.Communication.CreateUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/CreateUser", ReplyAction="http://tempuri.org/IUserRepository/CreateUserResponse")]
        System.Threading.Tasks.Task CreateUserAsync(Registry.Communication.CreateUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/UpdateUser", ReplyAction="http://tempuri.org/IUserRepository/UpdateUserResponse")]
        void UpdateUser(Registry.Communication.UpdateUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/UpdateUser", ReplyAction="http://tempuri.org/IUserRepository/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(Registry.Communication.UpdateUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/DeleteUser", ReplyAction="http://tempuri.org/IUserRepository/DeleteUserResponse")]
        void DeleteUser(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/DeleteUser", ReplyAction="http://tempuri.org/IUserRepository/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetAllUsers", ReplyAction="http://tempuri.org/IUserRepository/GetAllUsersResponse")]
        Registry.Communication.GetAllUsersResult[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetAllUsers", ReplyAction="http://tempuri.org/IUserRepository/GetAllUsersResponse")]
        System.Threading.Tasks.Task<Registry.Communication.GetAllUsersResult[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetUserByLogin", ReplyAction="http://tempuri.org/IUserRepository/GetUserByLoginResponse")]
        Registry.Communication.GetUserByLoginResult GetUserByLogin(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetUserByLogin", ReplyAction="http://tempuri.org/IUserRepository/GetUserByLoginResponse")]
        System.Threading.Tasks.Task<Registry.Communication.GetUserByLoginResult> GetUserByLoginAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/CreateUserGroup", ReplyAction="http://tempuri.org/IUserRepository/CreateUserGroupResponse")]
        void CreateUserGroup(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/CreateUserGroup", ReplyAction="http://tempuri.org/IUserRepository/CreateUserGroupResponse")]
        System.Threading.Tasks.Task CreateUserGroupAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/UpdateUserGroup", ReplyAction="http://tempuri.org/IUserRepository/UpdateUserGroupResponse")]
        void UpdateUserGroup(Registry.Communication.UpdateUserGroupRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/UpdateUserGroup", ReplyAction="http://tempuri.org/IUserRepository/UpdateUserGroupResponse")]
        System.Threading.Tasks.Task UpdateUserGroupAsync(Registry.Communication.UpdateUserGroupRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetUserGroups", ReplyAction="http://tempuri.org/IUserRepository/GetUserGroupsResponse")]
        Registry.Communication.GetAllUserGroupsResult[] GetUserGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetUserGroups", ReplyAction="http://tempuri.org/IUserRepository/GetUserGroupsResponse")]
        System.Threading.Tasks.Task<Registry.Communication.GetAllUserGroupsResult[]> GetUserGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/DeleteUserGroup", ReplyAction="http://tempuri.org/IUserRepository/DeleteUserGroupResponse")]
        void DeleteUserGroup(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/DeleteUserGroup", ReplyAction="http://tempuri.org/IUserRepository/DeleteUserGroupResponse")]
        System.Threading.Tasks.Task DeleteUserGroupAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserRepositoryChannel : Registry.Communication.IUserRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserRepositoryClient : System.ServiceModel.ClientBase<Registry.Communication.IUserRepository>, Registry.Communication.IUserRepository {
        
        public UserRepositoryClient() {
        }
        
        public UserRepositoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserRepositoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserRepositoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserRepositoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateUser(Registry.Communication.CreateUserRequest request) {
            base.Channel.CreateUser(request);
        }
        
        public System.Threading.Tasks.Task CreateUserAsync(Registry.Communication.CreateUserRequest request) {
            return base.Channel.CreateUserAsync(request);
        }
        
        public void UpdateUser(Registry.Communication.UpdateUserRequest request) {
            base.Channel.UpdateUser(request);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(Registry.Communication.UpdateUserRequest request) {
            return base.Channel.UpdateUserAsync(request);
        }
        
        public void DeleteUser(string login) {
            base.Channel.DeleteUser(login);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(string login) {
            return base.Channel.DeleteUserAsync(login);
        }
        
        public Registry.Communication.GetAllUsersResult[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<Registry.Communication.GetAllUsersResult[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public Registry.Communication.GetUserByLoginResult GetUserByLogin(string login) {
            return base.Channel.GetUserByLogin(login);
        }
        
        public System.Threading.Tasks.Task<Registry.Communication.GetUserByLoginResult> GetUserByLoginAsync(string login) {
            return base.Channel.GetUserByLoginAsync(login);
        }
        
        public void CreateUserGroup(string name) {
            base.Channel.CreateUserGroup(name);
        }
        
        public System.Threading.Tasks.Task CreateUserGroupAsync(string name) {
            return base.Channel.CreateUserGroupAsync(name);
        }
        
        public void UpdateUserGroup(Registry.Communication.UpdateUserGroupRequest request) {
            base.Channel.UpdateUserGroup(request);
        }
        
        public System.Threading.Tasks.Task UpdateUserGroupAsync(Registry.Communication.UpdateUserGroupRequest request) {
            return base.Channel.UpdateUserGroupAsync(request);
        }
        
        public Registry.Communication.GetAllUserGroupsResult[] GetUserGroups() {
            return base.Channel.GetUserGroups();
        }
        
        public System.Threading.Tasks.Task<Registry.Communication.GetAllUserGroupsResult[]> GetUserGroupsAsync() {
            return base.Channel.GetUserGroupsAsync();
        }
        
        public void DeleteUserGroup(int id) {
            base.Channel.DeleteUserGroup(id);
        }
        
        public System.Threading.Tasks.Task DeleteUserGroupAsync(int id) {
            return base.Channel.DeleteUserGroupAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Communication.IResourceRepository")]
    public interface IResourceRepository {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/CreateResource", ReplyAction="http://tempuri.org/IResourceRepository/CreateResourceResponse")]
        void CreateResource(Registry.Communication.CreateResourceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/CreateResource", ReplyAction="http://tempuri.org/IResourceRepository/CreateResourceResponse")]
        System.Threading.Tasks.Task CreateResourceAsync(Registry.Communication.CreateResourceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/GetAllResources", ReplyAction="http://tempuri.org/IResourceRepository/GetAllResourcesResponse")]
        Registry.Communication.GetAllResourcesResult[] GetAllResources(int count, int endId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/GetAllResources", ReplyAction="http://tempuri.org/IResourceRepository/GetAllResourcesResponse")]
        System.Threading.Tasks.Task<Registry.Communication.GetAllResourcesResult[]> GetAllResourcesAsync(int count, int endId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/GetCloudBlobConnectionString", ReplyAction="http://tempuri.org/IResourceRepository/GetCloudBlobConnectionStringResponse")]
        string GetCloudBlobConnectionString();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/GetCloudBlobConnectionString", ReplyAction="http://tempuri.org/IResourceRepository/GetCloudBlobConnectionStringResponse")]
        System.Threading.Tasks.Task<string> GetCloudBlobConnectionStringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/GetResources", ReplyAction="http://tempuri.org/IResourceRepository/GetResourcesResponse")]
        Registry.Communication.GetAllResourcesResult[] GetResources(Registry.Communication.UseFiltersRequest filter, int count, int endId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/GetResources", ReplyAction="http://tempuri.org/IResourceRepository/GetResourcesResponse")]
        System.Threading.Tasks.Task<Registry.Communication.GetAllResourcesResult[]> GetResourcesAsync(Registry.Communication.UseFiltersRequest filter, int count, int endId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IResourceRepositoryChannel : Registry.Communication.IResourceRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceRepositoryClient : System.ServiceModel.ClientBase<Registry.Communication.IResourceRepository>, Registry.Communication.IResourceRepository {
        
        public ResourceRepositoryClient() {
        }
        
        public ResourceRepositoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ResourceRepositoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ResourceRepositoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ResourceRepositoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateResource(Registry.Communication.CreateResourceRequest request) {
            base.Channel.CreateResource(request);
        }
        
        public System.Threading.Tasks.Task CreateResourceAsync(Registry.Communication.CreateResourceRequest request) {
            return base.Channel.CreateResourceAsync(request);
        }
        
        public Registry.Communication.GetAllResourcesResult[] GetAllResources(int count, int endId) {
            return base.Channel.GetAllResources(count, endId);
        }
        
        public System.Threading.Tasks.Task<Registry.Communication.GetAllResourcesResult[]> GetAllResourcesAsync(int count, int endId) {
            return base.Channel.GetAllResourcesAsync(count, endId);
        }
        
        public string GetCloudBlobConnectionString() {
            return base.Channel.GetCloudBlobConnectionString();
        }
        
        public System.Threading.Tasks.Task<string> GetCloudBlobConnectionStringAsync() {
            return base.Channel.GetCloudBlobConnectionStringAsync();
        }
        
        public Registry.Communication.GetAllResourcesResult[] GetResources(Registry.Communication.UseFiltersRequest filter, int count, int endId) {
            return base.Channel.GetResources(filter, count, endId);
        }
        
        public System.Threading.Tasks.Task<Registry.Communication.GetAllResourcesResult[]> GetResourcesAsync(Registry.Communication.UseFiltersRequest filter, int count, int endId) {
            return base.Channel.GetResourcesAsync(filter, count, endId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Communication.ICommunication")]
    public interface ICommunication {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/GetAllCategories", ReplyAction="http://tempuri.org/ICategoryRepository/GetAllCategoriesResponse")]
        Registry.Communication.GetAllCategoriesResult[] GetAllCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/GetAllCategories", ReplyAction="http://tempuri.org/ICategoryRepository/GetAllCategoriesResponse")]
        System.Threading.Tasks.Task<Registry.Communication.GetAllCategoriesResult[]> GetAllCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/UpdateCategory", ReplyAction="http://tempuri.org/ICategoryRepository/UpdateCategoryResponse")]
        void UpdateCategory(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/UpdateCategory", ReplyAction="http://tempuri.org/ICategoryRepository/UpdateCategoryResponse")]
        System.Threading.Tasks.Task UpdateCategoryAsync(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/CreateCategory", ReplyAction="http://tempuri.org/ICategoryRepository/CreateCategoryResponse")]
        void CreateCategory(System.Guid parentId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/CreateCategory", ReplyAction="http://tempuri.org/ICategoryRepository/CreateCategoryResponse")]
        System.Threading.Tasks.Task CreateCategoryAsync(System.Guid parentId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/DeleteCategory", ReplyAction="http://tempuri.org/ICategoryRepository/DeleteCategoryResponse")]
        void DeleteCategory(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryRepository/DeleteCategory", ReplyAction="http://tempuri.org/ICategoryRepository/DeleteCategoryResponse")]
        System.Threading.Tasks.Task DeleteCategoryAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/GetAllResourceGroups", ReplyAction="http://tempuri.org/IResourceGroupRepository/GetAllResourceGroupsResponse")]
        Registry.Communication.GetAllGroupsResult[] GetAllResourceGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/GetAllResourceGroups", ReplyAction="http://tempuri.org/IResourceGroupRepository/GetAllResourceGroupsResponse")]
        System.Threading.Tasks.Task<Registry.Communication.GetAllGroupsResult[]> GetAllResourceGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/UpdateResourceGroup", ReplyAction="http://tempuri.org/IResourceGroupRepository/UpdateResourceGroupResponse")]
        void UpdateResourceGroup(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/UpdateResourceGroup", ReplyAction="http://tempuri.org/IResourceGroupRepository/UpdateResourceGroupResponse")]
        System.Threading.Tasks.Task UpdateResourceGroupAsync(System.Guid id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/DeleteGroup", ReplyAction="http://tempuri.org/IResourceGroupRepository/DeleteGroupResponse")]
        void DeleteGroup(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/DeleteGroup", ReplyAction="http://tempuri.org/IResourceGroupRepository/DeleteGroupResponse")]
        System.Threading.Tasks.Task DeleteGroupAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/CreateGroup", ReplyAction="http://tempuri.org/IResourceGroupRepository/CreateGroupResponse")]
        void CreateGroup(string name, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceGroupRepository/CreateGroup", ReplyAction="http://tempuri.org/IResourceGroupRepository/CreateGroupResponse")]
        System.Threading.Tasks.Task CreateGroupAsync(string name, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/CreateResource", ReplyAction="http://tempuri.org/IResourceRepository/CreateResourceResponse")]
        void CreateResource(Registry.Communication.CreateResourceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/CreateResource", ReplyAction="http://tempuri.org/IResourceRepository/CreateResourceResponse")]
        System.Threading.Tasks.Task CreateResourceAsync(Registry.Communication.CreateResourceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/GetAllResources", ReplyAction="http://tempuri.org/IResourceRepository/GetAllResourcesResponse")]
        Registry.Communication.GetAllResourcesResult[] GetAllResources(int count, int endId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/GetAllResources", ReplyAction="http://tempuri.org/IResourceRepository/GetAllResourcesResponse")]
        System.Threading.Tasks.Task<Registry.Communication.GetAllResourcesResult[]> GetAllResourcesAsync(int count, int endId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/GetCloudBlobConnectionString", ReplyAction="http://tempuri.org/IResourceRepository/GetCloudBlobConnectionStringResponse")]
        string GetCloudBlobConnectionString();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/GetCloudBlobConnectionString", ReplyAction="http://tempuri.org/IResourceRepository/GetCloudBlobConnectionStringResponse")]
        System.Threading.Tasks.Task<string> GetCloudBlobConnectionStringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/GetResources", ReplyAction="http://tempuri.org/IResourceRepository/GetResourcesResponse")]
        Registry.Communication.GetAllResourcesResult[] GetResources(Registry.Communication.UseFiltersRequest filter, int count, int endId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResourceRepository/GetResources", ReplyAction="http://tempuri.org/IResourceRepository/GetResourcesResponse")]
        System.Threading.Tasks.Task<Registry.Communication.GetAllResourcesResult[]> GetResourcesAsync(Registry.Communication.UseFiltersRequest filter, int count, int endId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/CreateUser", ReplyAction="http://tempuri.org/IUserRepository/CreateUserResponse")]
        void CreateUser(Registry.Communication.CreateUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/CreateUser", ReplyAction="http://tempuri.org/IUserRepository/CreateUserResponse")]
        System.Threading.Tasks.Task CreateUserAsync(Registry.Communication.CreateUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/UpdateUser", ReplyAction="http://tempuri.org/IUserRepository/UpdateUserResponse")]
        void UpdateUser(Registry.Communication.UpdateUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/UpdateUser", ReplyAction="http://tempuri.org/IUserRepository/UpdateUserResponse")]
        System.Threading.Tasks.Task UpdateUserAsync(Registry.Communication.UpdateUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/DeleteUser", ReplyAction="http://tempuri.org/IUserRepository/DeleteUserResponse")]
        void DeleteUser(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/DeleteUser", ReplyAction="http://tempuri.org/IUserRepository/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetAllUsers", ReplyAction="http://tempuri.org/IUserRepository/GetAllUsersResponse")]
        Registry.Communication.GetAllUsersResult[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetAllUsers", ReplyAction="http://tempuri.org/IUserRepository/GetAllUsersResponse")]
        System.Threading.Tasks.Task<Registry.Communication.GetAllUsersResult[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetUserByLogin", ReplyAction="http://tempuri.org/IUserRepository/GetUserByLoginResponse")]
        Registry.Communication.GetUserByLoginResult GetUserByLogin(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetUserByLogin", ReplyAction="http://tempuri.org/IUserRepository/GetUserByLoginResponse")]
        System.Threading.Tasks.Task<Registry.Communication.GetUserByLoginResult> GetUserByLoginAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/CreateUserGroup", ReplyAction="http://tempuri.org/IUserRepository/CreateUserGroupResponse")]
        void CreateUserGroup(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/CreateUserGroup", ReplyAction="http://tempuri.org/IUserRepository/CreateUserGroupResponse")]
        System.Threading.Tasks.Task CreateUserGroupAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/UpdateUserGroup", ReplyAction="http://tempuri.org/IUserRepository/UpdateUserGroupResponse")]
        void UpdateUserGroup(Registry.Communication.UpdateUserGroupRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/UpdateUserGroup", ReplyAction="http://tempuri.org/IUserRepository/UpdateUserGroupResponse")]
        System.Threading.Tasks.Task UpdateUserGroupAsync(Registry.Communication.UpdateUserGroupRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetUserGroups", ReplyAction="http://tempuri.org/IUserRepository/GetUserGroupsResponse")]
        Registry.Communication.GetAllUserGroupsResult[] GetUserGroups();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetUserGroups", ReplyAction="http://tempuri.org/IUserRepository/GetUserGroupsResponse")]
        System.Threading.Tasks.Task<Registry.Communication.GetAllUserGroupsResult[]> GetUserGroupsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/DeleteUserGroup", ReplyAction="http://tempuri.org/IUserRepository/DeleteUserGroupResponse")]
        void DeleteUserGroup(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/DeleteUserGroup", ReplyAction="http://tempuri.org/IUserRepository/DeleteUserGroupResponse")]
        System.Threading.Tasks.Task DeleteUserGroupAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommunicationChannel : Registry.Communication.ICommunication, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommunicationClient : System.ServiceModel.ClientBase<Registry.Communication.ICommunication>, Registry.Communication.ICommunication {
        
        public CommunicationClient() {
        }
        
        public CommunicationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommunicationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommunicationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Registry.Communication.GetAllCategoriesResult[] GetAllCategories() {
            return base.Channel.GetAllCategories();
        }
        
        public System.Threading.Tasks.Task<Registry.Communication.GetAllCategoriesResult[]> GetAllCategoriesAsync() {
            return base.Channel.GetAllCategoriesAsync();
        }
        
        public void UpdateCategory(System.Guid id, string name) {
            base.Channel.UpdateCategory(id, name);
        }
        
        public System.Threading.Tasks.Task UpdateCategoryAsync(System.Guid id, string name) {
            return base.Channel.UpdateCategoryAsync(id, name);
        }
        
        public void CreateCategory(System.Guid parentId, string name) {
            base.Channel.CreateCategory(parentId, name);
        }
        
        public System.Threading.Tasks.Task CreateCategoryAsync(System.Guid parentId, string name) {
            return base.Channel.CreateCategoryAsync(parentId, name);
        }
        
        public void DeleteCategory(System.Guid id) {
            base.Channel.DeleteCategory(id);
        }
        
        public System.Threading.Tasks.Task DeleteCategoryAsync(System.Guid id) {
            return base.Channel.DeleteCategoryAsync(id);
        }
        
        public Registry.Communication.GetAllGroupsResult[] GetAllResourceGroups() {
            return base.Channel.GetAllResourceGroups();
        }
        
        public System.Threading.Tasks.Task<Registry.Communication.GetAllGroupsResult[]> GetAllResourceGroupsAsync() {
            return base.Channel.GetAllResourceGroupsAsync();
        }
        
        public void UpdateResourceGroup(System.Guid id, string name) {
            base.Channel.UpdateResourceGroup(id, name);
        }
        
        public System.Threading.Tasks.Task UpdateResourceGroupAsync(System.Guid id, string name) {
            return base.Channel.UpdateResourceGroupAsync(id, name);
        }
        
        public void DeleteGroup(System.Guid id) {
            base.Channel.DeleteGroup(id);
        }
        
        public System.Threading.Tasks.Task DeleteGroupAsync(System.Guid id) {
            return base.Channel.DeleteGroupAsync(id);
        }
        
        public void CreateGroup(string name, string login) {
            base.Channel.CreateGroup(name, login);
        }
        
        public System.Threading.Tasks.Task CreateGroupAsync(string name, string login) {
            return base.Channel.CreateGroupAsync(name, login);
        }
        
        public void CreateResource(Registry.Communication.CreateResourceRequest request) {
            base.Channel.CreateResource(request);
        }
        
        public System.Threading.Tasks.Task CreateResourceAsync(Registry.Communication.CreateResourceRequest request) {
            return base.Channel.CreateResourceAsync(request);
        }
        
        public Registry.Communication.GetAllResourcesResult[] GetAllResources(int count, int endId) {
            return base.Channel.GetAllResources(count, endId);
        }
        
        public System.Threading.Tasks.Task<Registry.Communication.GetAllResourcesResult[]> GetAllResourcesAsync(int count, int endId) {
            return base.Channel.GetAllResourcesAsync(count, endId);
        }
        
        public string GetCloudBlobConnectionString() {
            return base.Channel.GetCloudBlobConnectionString();
        }
        
        public System.Threading.Tasks.Task<string> GetCloudBlobConnectionStringAsync() {
            return base.Channel.GetCloudBlobConnectionStringAsync();
        }
        
        public Registry.Communication.GetAllResourcesResult[] GetResources(Registry.Communication.UseFiltersRequest filter, int count, int endId) {
            return base.Channel.GetResources(filter, count, endId);
        }
        
        public System.Threading.Tasks.Task<Registry.Communication.GetAllResourcesResult[]> GetResourcesAsync(Registry.Communication.UseFiltersRequest filter, int count, int endId) {
            return base.Channel.GetResourcesAsync(filter, count, endId);
        }
        
        public void CreateUser(Registry.Communication.CreateUserRequest request) {
            base.Channel.CreateUser(request);
        }
        
        public System.Threading.Tasks.Task CreateUserAsync(Registry.Communication.CreateUserRequest request) {
            return base.Channel.CreateUserAsync(request);
        }
        
        public void UpdateUser(Registry.Communication.UpdateUserRequest request) {
            base.Channel.UpdateUser(request);
        }
        
        public System.Threading.Tasks.Task UpdateUserAsync(Registry.Communication.UpdateUserRequest request) {
            return base.Channel.UpdateUserAsync(request);
        }
        
        public void DeleteUser(string login) {
            base.Channel.DeleteUser(login);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(string login) {
            return base.Channel.DeleteUserAsync(login);
        }
        
        public Registry.Communication.GetAllUsersResult[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<Registry.Communication.GetAllUsersResult[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public Registry.Communication.GetUserByLoginResult GetUserByLogin(string login) {
            return base.Channel.GetUserByLogin(login);
        }
        
        public System.Threading.Tasks.Task<Registry.Communication.GetUserByLoginResult> GetUserByLoginAsync(string login) {
            return base.Channel.GetUserByLoginAsync(login);
        }
        
        public void CreateUserGroup(string name) {
            base.Channel.CreateUserGroup(name);
        }
        
        public System.Threading.Tasks.Task CreateUserGroupAsync(string name) {
            return base.Channel.CreateUserGroupAsync(name);
        }
        
        public void UpdateUserGroup(Registry.Communication.UpdateUserGroupRequest request) {
            base.Channel.UpdateUserGroup(request);
        }
        
        public System.Threading.Tasks.Task UpdateUserGroupAsync(Registry.Communication.UpdateUserGroupRequest request) {
            return base.Channel.UpdateUserGroupAsync(request);
        }
        
        public Registry.Communication.GetAllUserGroupsResult[] GetUserGroups() {
            return base.Channel.GetUserGroups();
        }
        
        public System.Threading.Tasks.Task<Registry.Communication.GetAllUserGroupsResult[]> GetUserGroupsAsync() {
            return base.Channel.GetUserGroupsAsync();
        }
        
        public void DeleteUserGroup(int id) {
            base.Channel.DeleteUserGroup(id);
        }
        
        public System.Threading.Tasks.Task DeleteUserGroupAsync(int id) {
            return base.Channel.DeleteUserGroupAsync(id);
        }
    }
}
